// Generated by CoffeeScript 1.6.3
(function() {
  var D2B, DECODE_MAP, Decoder6, Decoder6E, Decoder8, Decoder8E, INT_METHODS, LOG10_LOG2, POW_10, RE_FORMAT, Unpack, UnpackN, ceil, d2b, log, parseFormat, type, unpack,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  type = function(obj) {
    return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();
  };

  log = Math.log;

  ceil = Math.ceil;

  LOG10_LOG2 = log(10) / log(2);

  D2B = function(d) {
    return ceil(LOG10_LOG2 * d);
  };

  d2b = function(d) {
    return ceil(LOG10_LOG2 * d) + 1;
  };

  RE_FORMAT = /^(?:([BbDd])(\d+)|([RrFf])(\d+)\.(\d+))(.*)$/;

  INT_METHODS = ['B', 'b', 'D', 'd'];

  parseFormat = function(format) {
    var parsed, re;
    parsed = [];
    while (re = RE_FORMAT.exec(format)) {
      if (INT_METHODS.indexof(re[1]) !== -1) {
        parsed.push([re[1], parseInt(re[2])]);
      } else {
        parsed.push([re[3], parseInt(re[4]), parseInt(re[5])]);
      }
      format = re[6];
    }
    return parsed;
  };

  DECODE_MAP = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    'A': 10,
    'B': 11,
    'C': 12,
    'D': 13,
    'E': 14,
    'F': 15,
    'G': 16,
    'H': 17,
    'I': 18,
    'J': 19,
    'K': 20,
    'L': 21,
    'M': 22,
    'N': 23,
    'O': 24,
    'P': 25,
    'Q': 26,
    'R': 27,
    'S': 28,
    'T': 29,
    'U': 30,
    'V': 31,
    'W': 32,
    'X': 33,
    'Y': 34,
    'Z': 35,
    'a': 36,
    'b': 37,
    'c': 38,
    'd': 39,
    'e': 40,
    'f': 41,
    'g': 42,
    'h': 43,
    'i': 44,
    'j': 45,
    'k': 46,
    'l': 47,
    'm': 48,
    'n': 49,
    'o': 50,
    'p': 51,
    'q': 52,
    'r': 53,
    's': 54,
    't': 55,
    'u': 56,
    'v': 57,
    'w': 58,
    'x': 59,
    'y': 60,
    'z': 61,
    '-': 62,
    '_': 63
  };

  Decoder6 = (function() {
    function Decoder6(data) {
      this.data = data;
      this.bit_off = this.byte_off = 0;
      this;
    }

    Decoder6.prototype.isText = function() {
      return true;
    };

    Decoder6.prototype.isBinary = function() {
      return false;
    };

    Decoder6.prototype.supportEof = function() {
      return false;
    };

    Decoder6.prototype.decode = function(w) {
      var n;
      n = 0;
      if (this.bit_off > 0) {
        n = DECODE_MAP[this.data[this.byte_off]] & (1 << 6 - this.bit_off) - 1;
        if (this.bit_off + w < 6) {
          this.bit_off += w;
          return n >> 6 - this.bit_off;
        }
        w -= 6 - this.bit_off;
        this.byte_off += 1;
      }
      while (w >= 6) {
        n = (n << 6) + DECODE_MAP[this.data[this.byte_off]];
        w -= 6;
        this.byte_off += 1;
      }
      if (w > 0) {
        n = (n << w) + (DECODE_MAP[this.data[this.byte_off]] >> 6 - w);
      }
      this.bit_off = w;
      return n;
    };

    return Decoder6;

  })();

  Decoder6E = (function(_super) {
    __extends(Decoder6E, _super);

    function Decoder6E(data) {
      this.data = data;
      Decoder6E.__super__.constructor.apply(this, arguments);
      if (this.data.length < 4) {
        throw 'size too short';
      }
      this.bits_read = 0;
      this.size = 30;
      this.size = this.decode(30);
      this.bits_read = 0;
      this;
    }

    Decoder6E.prototype.supportEof = function() {
      return true;
    };

    Decoder6E.prototype.eof = function() {
      return this.bits_read >= this.size;
    };

    Decoder6E.prototype.decode = function(w) {
      if ((this.bits_read += w) > this.size) {
        throw 'end of data';
      }
      return Decoder6E.__super__.decode.apply(this, arguments);
    };

    return Decoder6E;

  })(Decoder6);

  Decoder8 = (function() {
    function Decoder8(data) {
      this.data = data;
      this.bit_off = this.byte_off = 0;
      this;
    }

    Decoder8.prototype.isText = function() {
      return false;
    };

    Decoder8.prototype.isBinary = function() {
      return true;
    };

    Decoder8.prototype.supportEof = function() {
      return false;
    };

    Decoder8.prototype.decode = typeof window !== "undefined" && window !== null ? function(w) {
      var n;
      n = 0;
      if (this.bit_off > 0) {
        n = this.data[this.byte_off] & (1 << 8 - this.bit_off) - 1;
        if (this.bit_off + w < 8) {
          this.bit_off += w;
          return n >> 8 - this.bit_off;
        }
        w -= 8 - this.bit_off;
        this.byte_off += 1;
      }
      while (w >= 8) {
        n = (n << 8) + this.data[this.byte_off];
        w -= 8;
        this.byte_off += 1;
      }
      if (w > 0) {
        n = (n << w) + (this.data[this.byte_off] >> 8 - w);
      }
      this.bit_off = w;
      return n;
    } : function(w) {
      var n;
      n = 0;
      if (this.bit_off > 0) {
        n = this.data.readUInt8(this.byte_off) & (1 << 8 - this.bit_off) - 1;
        if (this.bit_off + w < 8) {
          this.bit_off += w;
          return n >> 8 - this.bit_off;
        }
        w -= 8 - this.bit_off;
        this.byte_off += 1;
      }
      while (w >= 8) {
        n = (n << 8) + this.data.readUInt8(this.byte_off);
        w -= 8;
        this.byte_off += 1;
      }
      if (w > 0) {
        n = (n << w) + (this.data.readUInt8(this.byte_off) >> 8 - w);
      }
      this.bit_off = w;
      return n;
    };

    return Decoder8;

  })();

  Decoder8E = (function(_super) {
    __extends(Decoder8E, _super);

    function Decoder8E(data) {
      this.data = data;
      Decoder8E.__super__.constructor.apply(this, arguments);
      if (this.data.length < 4) {
        throw 'size too short';
      }
      this.bits_read = 0;
      this.size = 32;
      this.size = this.decode(32);
      this.bits_read = 0;
      this;
    }

    Decoder8E.prototype.support_eof = function() {
      return true;
    };

    Decoder8E.prototype.eof = function() {
      return this.bits_read >= this.size;
    };

    Decoder8E.prototype.decode = function(w) {
      if ((this.bits_read += w) > this.size) {
        throw 'exceeds end of data';
      }
      return Decoder8E.__super__.decode.apply(this, arguments);
    };

    return Decoder8E;

  })(Decoder8);

  POW_10 = [1.0, 0.1, 0.01, 0.001, 0.0001, 0.00001, 0.000001, 0.0000001, 0.00000001, 0.000000001, 0.0000000001];

  Unpack = (function() {
    function Unpack(input, use_eof) {
      var ctor;
      ctor = type(input) === 'string' ? use_eof ? Decoder6E : Decoder6 : use_eof ? Decoder8E : Decoder8;
      this.dec = new ctor(input);
      this;
    }

    Unpack.prototype.isText = function() {
      return this.dec.isText();
    };

    Unpack.prototype.isBinary = function() {
      return this.dec.isBinary();
    };

    Unpack.prototype.supportEof = function() {
      return this.dec.supportEof();
    };

    Unpack.prototype.useNil = function() {
      return false;
    };

    Unpack.prototype.eof = function() {
      return this.dec.eof();
    };

    Unpack.prototype.raw = function(w) {
      return this.dec.decode(w);
    };

    Unpack.prototype.B = function(w) {
      return this.raw(w);
    };

    Unpack.prototype.b = function(w) {
      return this.raw(w) - (1 << w - 1);
    };

    Unpack.prototype.R = function(w, f) {
      return this.B(w) * POW_10[f];
    };

    Unpack.prototype.r = function(w, f) {
      return this.b(w) * POW_10[f];
    };

    Unpack.prototype.D = function(w) {
      return this.B(D2B(w));
    };

    Unpack.prototype.d = function(w) {
      return this.b(d2b(w));
    };

    Unpack.prototype.F = function(w, f) {
      return this.R(D2B(w), f);
    };

    Unpack.prototype.f = function(w, f) {
      return this.f(d2b(w), f);
    };

    Unpack.prototype.array = function(format) {
      var data, f, _i, _len;
      if (type(format) !== 'array') {
        format = parseFormat(format);
      }
      data = [];
      for (_i = 0, _len = format.length; _i < _len; _i++) {
        f = format[_i];
        data.push((function() {
          switch (f[0]) {
            case 'B':
              return this.B(f[1]);
            case 'b':
              return this.b(f[1]);
            case 'D':
              return this.D(f[1]);
            case 'd':
              return this.d(f[1]);
            case 'R':
              return this.R(f[1], f[2]);
            case 'r':
              return this.r(f[1], f[2]);
            case 'D':
              return this.D(f[1], f[2]);
            case 'd':
              return this.d(f[1], f[2]);
          }
        }).call(this));
      }
      return data;
    };

    return Unpack;

  })();

  UnpackN = (function(_super) {
    __extends(UnpackN, _super);

    function UnpackN(input, binary, use_eof) {
      UnpackN.__super__.constructor.apply(this, arguments);
    }

    UnpackN.prototype.use_nil = function() {
      return true;
    };

    UnpackN.prototype.B = function(w) {
      var n;
      if ((n = this.raw(w)) === 0) {
        return null;
      } else {
        return n - 1;
      }
    };

    UnpackN.prototype.b = function(w) {
      var n;
      if ((n = this.raw(w)) === 0) {
        return null;
      } else {
        return n - (1 << w - 1);
      }
    };

    UnpackN.prototype.R = function(w, f) {
      var n;
      if ((n = this.B(w)) != null) {
        return n * POW_10[f];
      } else {
        return null;
      }
    };

    UnpackN.prototype.r = function(w, f) {
      var n;
      if ((n = this.b(w)) != null) {
        return n * POW_10[f];
      } else {
        return null;
      }
    };

    return UnpackN;

  })(Unpack);

  unpack = function(input, option) {
    if (option == null) {
      option = {};
    }
    return new (option.nil ? UnpackN : Unpack)(input, option.eof);
  };

  if (typeof window !== "undefined" && window !== null) {
    window.Decpack = {
      unpack: unpack,
      parseFormat: parseFormat
    };
  }

  if (typeof exports !== "undefined" && exports !== null) {
    exports.unpack = unpack;
    exports.parseFormat = parseFormat;
  }

}).call(this);
