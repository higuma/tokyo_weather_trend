// Generated by CoffeeScript 1.6.3
(function() {
  (function(window) {
    var DECODE_MAP, ENCODE_MAP, POW_10, dataSize, decode, decodeFloat, decodeFormat, decodeSigned, decodeSignedFloat, encode, encodeFloat, encodeSigned, encodeSignedFloat;
    ENCODE_MAP = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];
    DECODE_MAP = {
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      ':': 10,
      ';': 11,
      'A': 12,
      'B': 13,
      'C': 14,
      'D': 15,
      'E': 16,
      'F': 17,
      'G': 18,
      'H': 19,
      'I': 20,
      'J': 21,
      'K': 22,
      'L': 23,
      'M': 24,
      'N': 25,
      'O': 26,
      'P': 27,
      'Q': 28,
      'R': 29,
      'S': 30,
      'T': 31,
      'U': 32,
      'V': 33,
      'W': 34,
      'X': 35,
      'Y': 36,
      'Z': 37,
      'a': 38,
      'b': 39,
      'c': 40,
      'd': 41,
      'e': 42,
      'f': 43,
      'g': 44,
      'h': 45,
      'i': 46,
      'j': 47,
      'k': 48,
      'l': 49,
      'm': 50,
      'n': 51,
      'o': 52,
      'p': 53,
      'q': 54,
      'r': 55,
      's': 56,
      't': 57,
      'u': 58,
      'v': 59,
      'w': 60,
      'x': 61,
      'y': 62,
      'z': 63
    };
    POW_10 = [1.0, 10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 10000000.0];
    encode = function(num, len) {
      var code, i, _i, _j;
      code = '';
      if (num != null) {
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          code = ENCODE_MAP[num & 0x3F] + code;
          num >>= 6;
        }
      } else {
        for (i = _j = 0; 0 <= len ? _j < len : _j > len; i = 0 <= len ? ++_j : --_j) {
          code += '_';
        }
      }
      return code;
    };
    decode = function(str, offs, len) {
      var i, n, num, _i, _ref;
      num = 0;
      for (i = _i = offs, _ref = offs + len; offs <= _ref ? _i < _ref : _i > _ref; i = offs <= _ref ? ++_i : --_i) {
        n = DECODE_MAP[str[i]];
        if (n === void 0) {
          return;
        }
        num = (num << 6) + n;
      }
      return num;
    };
    encodeSigned = function(n, len) {
      if (n != null) {
        n = n + (1 << len * 6 - 1);
      }
      return encode(n, len);
    };
    encodeFloat = function(f, len, dec) {
      if (f != null) {
        f = Math.floor(f * POW_10[dec]);
      }
      return encode(f, len);
    };
    encodeSignedFloat = function(f, len, dec) {
      if (f != null) {
        f = Math.floor(f * POW_10[dec]) + (1 << len * 6 - 1);
      }
      return encode(f, len);
    };
    decodeSigned = function(str, offs, len) {
      var n;
      n = decode(str, offs, len);
      if (n === void 0) {
        return;
      }
      return n - (1 << len * 6 - 1);
    };
    decodeFloat = function(str, offs, len, dec) {
      var n;
      n = decode(str, offs, len);
      if (n === void 0) {
        return;
      }
      return n / POW_10[dec];
    };
    decodeSignedFloat = function(str, offs, len, dec) {
      var n;
      n = decodeSigned(str, offs, len);
      if (n === void 0) {
        return;
      }
      return n / POW_10[dec];
    };
    dataSize = function(fmt) {
      var f, len, _i, _len;
      len = 0;
      for (_i = 0, _len = fmt.length; _i < _len; _i++) {
        f = fmt[_i];
        len += f[1];
      }
      return len;
    };
    decodeFormat = function(fmt, str, offs) {
      var data, f, _i, _len;
      if (offs == null) {
        offs = 0;
      }
      data = [];
      for (_i = 0, _len = fmt.length; _i < _len; _i++) {
        f = fmt[_i];
        data.push((function() {
          switch (f[0]) {
            case 'N':
              return decode(str, offs, f[1]);
            case 'n':
              return decodeSigned(str, offs, f[1]);
            case 'F':
              return decodeFloat(str, offs, f[1], f[2]);
            case 'f':
              return decodeSignedFloat(str, offs, f[1], f[2]);
          }
        })());
        offs += f[1];
      }
      return data;
    };
    return window.Encode64 = {
      encode: encode,
      decode: decode,
      encodeSigned: encodeSigned,
      encodeFloat: encodeFloat,
      encodeSignedFloat: encodeSignedFloat,
      decodeSigned: decodeSigned,
      decodeFloat: decodeFloat,
      decodeSignedFloat: decodeSignedFloat,
      dataSize: dataSize,
      decodeFormat: decodeFormat
    };
  })(window);

}).call(this);
